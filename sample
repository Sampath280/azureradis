```html
The error  object NoneType can't be used in 'await' expression occur  while using async method needing to be asynchronous if you're implementing an asynchronous context manager.
![enter image description here](https://i.imgur.com/HGrlCz4.png)
The declaration  of  async Context Managers as below

```python
 async def __aexit__(self, exc_type, exc, tb):
        await log('exiting context')
```


Refer this  [Document](https://docs.python.org/3/reference/datamodel.html#object.__aexit__)  for  Asynchronous Context [Managers ](https://bugs.python.org/issue29922).

```python
@pytest.mark.asyncio
@patch('DurableFunctionsOrchestrator.function_app.df.DurableOrchestrationClient')  async def test_my_func(mock_durable_client):
 
    mock_timer = AsyncMock(spec=func.TimerRequest)
    mock_timer.past_due = False  
    mock_client = AsyncMock(spec=df.DurableOrchestrationClient)
    mock_client.start_new = AsyncMock(return_value='test_instance_id')
    mock_durable_client.return_value = mock_client
    await my_func(mock_timer, mock_client)
    mock_client.start_new.assert_called_with("hello_orchestrator")
```

(0r)
```python
from DurableFunctionsOrchestrator.function_app import my_func

class MockTimerRequest:
    pass

class MockDurableOrchestrationClient:
    def start_new(self, orchestration_name: str):
   
        pass

@pytest.mark.asyncio
async def test_my_func():
    timer = MockTimerRequest()
    client = MockDurableOrchestrationClient()
 
    client.start_new = MagicMock()
    await my_func(timer, client)

    client.start_new.assert_called_with("hello_orchestrator")



```






```
